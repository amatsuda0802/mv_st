このコードは、3Dシーンにおけるカメラの位置と視野（フラスタム）を視覚化するための関数群を定義しています。特に、カメラのエクストリンジックとインストリンジック行列を使用して、シーンの軸に沿った投影を描画する機能を提供します。

### 主な関数とその役割

#### 1. `draw_cameras`
この関数は、カメラのフラスタムを描画します。

##### 引数
- **`resolution`**: 出力画像の解像度。
- **`extrinsics`**: カメラのエクストリンジック行列（4x4の行列）。
- **`intrinsics`**: カメラのインストリンジック行列（3x3の行列）。
- **`color`**: 各カメラの色。
- **`near`**, **`far`**: フラスタムの近くと遠くの平面の距離。
- **`margin`**: シーンの軸に沿ったバウンディングボックスの余白。
- **`frustum_scale`**: フラスタムのスケール。

##### 処理の流れ
1. **シーンの境界を計算**:
   ```python
   minima, maxima = compute_aabb(extrinsics, intrinsics, near, far)
   scene_minima, scene_maxima = compute_equal_aabb_with_margin(minima, maxima, margin=margin)
   ```

2. **フラスタムのコーナーを計算**:
   ```python
   frustum_corners = unproject_frustum_corners(extrinsics, intrinsics, corner_depth)
   ```

3. **各軸に投影**:
   各軸に対してシーンのミニマムとマキシマムを計算し、それに基づいてカメラの近くおよび遠くの平面を描画します。

4. **フラスタム自体の描画**:
   カメラの原点とフラスタムコーナーを使って、カメラのフラスタムを描画します。

##### 返り値
- **`Float[Tensor, "3 3 height width"]`**: 各軸に沿ったカメラのフラスタムの画像。

---

#### 2. `compute_aabb`
この関数は、カメラフラスタムの軸に沿ったバウンディングボックス（AABB）を計算します。

##### 引数
- **`extrinsics`**: カメラのエクストリンジック行列。
- **`intrinsics`**: カメラのインストリンジック行列。
- **`near`**, **`far`**: フラスタムの近くと遠くの距離。

##### 処理の流れ
1. カメラの位置を含むポイントを収集。
2. 近くおよび遠くの平面のコーナーを計算。
3. 最小値と最大値を計算して、AABBを返します。

##### 返り値
- **最小値**および**最大値**の座標。

---

#### 3. `compute_equal_aabb_with_margin`
この関数は、与えられた最小値と最大値を元に、余白を考慮した新しいAABBを計算します。

##### 引数
- **`minima`**, **`maxima`**: シーンの最小および最大座標。
- **`margin`**: 余白の大きさ。

##### 処理の流れ
1. 中点を計算。
2. スパンを計算して、余白を加えた最小値と最大値を返します。

---

#### 4. `unproject_frustum_corners`
この関数は、カメラのフラスタムのコーナーを計算します。

##### 引数
- **`extrinsics`**: エクストリンジック行列。
- **`intrinsics`**: インストリンジック行列。
- **`depth`**: 深さ（Z座標）。

##### 処理の流れ
1. フラスタムコーナーの2D座標を計算。
2. レイ方向をカメラ空間で計算。
3. 深さを使って、ワールド空間のコーナー座標を返します。

---

### コード全体の目的
このコードは、3D視覚化においてカメラのフラスタムを描画するためのものであり、視覚化ツールやシミュレーションなどで役立ちます。カメラの位置、視野、近く・遠くの平面を明示的に示すことで、シーンの理解を深める手助けをします。